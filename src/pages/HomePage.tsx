import React, { useEffect, useState } from 'react';
import { useParams, useLocation } from 'react-router-dom';
import { SearchHero } from '../components/home/SearchHero';
import { JobList } from '../components/home/JobList';
import { JobFilters } from '../components/home/JobFilters';
import { FavoriteJobs } from '../components/home/FavoriteJobs';
import { SEOJobContent } from '../components/job/SEOJobContent';
import { useJobs } from '../hooks/useJobs';
import { useJobFilters } from '../hooks/useJobFilters';
import { jobCategories } from '../data/jobCategories';
import { useAuthContext } from '../contexts/AuthContext';
import { generateMetaTags } from '../utils/seoUtils';
import { generateJobUrl } from '../utils/seoUtils';
import { checkJobDates } from '../utils/dateUtils';
import { Heart, Filter, X, Search, MapPin, Briefcase, RefreshCw } from 'lucide-react';
import toast from 'react-hot-toast';

export function HomePage() {
  const { user } = useAuthContext();
  const { pageNumber } = useParams();
  const location = useLocation();
  const [searchTerm, setSearchTerm] = useState('');
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);

  // Optimized hook kullanÄ±mÄ±
  const { 
    jobs, 
    categories, 
    loading, 
    loadingMore,
    error, 
    hasMore,
    loadMoreJobs,
    refetchJobs 
  } = useJobs({
    categoryFilter: undefined, 
    searchTerm, 
    limit: 20 // Sayfa baÅŸÄ±na 20 ilan
  });

  const { filters, updateFilters, filteredJobs } = useJobFilters(jobs);

  useEffect(() => {
    // SEO meta tags
    generateMetaTags({
      title: 'Ä°ÅŸ Ä°lanlarÄ± 2025 - Ä°ÅŸBuldum HÄ±zlÄ± Ä°ÅŸ Bulma Platformu',
      description: 'Ä°ÅŸBuldum ile hÄ±zlÄ± iÅŸ bulun! 6 Ocak 2025 itibarÄ±yla 50.000+ aktif iÅŸ ilanÄ±. Ä°stanbul, Ankara, Ä°zmir ve tÃ¼m ÅŸehirlerde gÃ¼ncel iÅŸ fÄ±rsatlarÄ±. Hemen baÅŸvurun, kariyerinizi ÅŸekillendirin!',
      keywords: [
        'iÅŸ ilanlarÄ±', 'gÃ¼ncel iÅŸ ilanlarÄ±', 'iÅŸ fÄ±rsatlarÄ±', 'eleman ilanlarÄ±', 'kariyer', 'iÅŸ ilanlarÄ± 2025',
        'istanbul iÅŸ ilanlarÄ±', 'ankara iÅŸ ilanlarÄ±', 'izmir iÅŸ ilanlarÄ±',
        'mÃ¼hendis iÅŸ ilanlarÄ±', 'garson iÅŸ ilanlarÄ±', 'kurye iÅŸ ilanlarÄ±', 
        'resepsiyon gÃ¶revlisi iÅŸ ilanlarÄ±', 'aÅŸÃ§Ä± yardÄ±mcÄ±sÄ± iÅŸ ilanlarÄ±', 'Ã¶zel gÃ¼venlik iÅŸ ilanlarÄ±',
        'yeni iÅŸ ilanlarÄ±', 'part time iÅŸ ilanlarÄ±', 'tam zamanlÄ± iÅŸ ilanlarÄ±',
        'uzaktan Ã§alÄ±ÅŸma iÅŸ ilanlarÄ±', 'remote iÅŸ ilanlarÄ±', 'freelance iÅŸ ilanlarÄ±', 'home office iÅŸ ilanlarÄ±',
        'yeni mezun iÅŸ ilanlarÄ±', 'deneyimsiz iÅŸ ilanlarÄ±',
        'iÅŸ ara', 'iÅŸ bul', 'kariyer fÄ±rsatlarÄ±', 'iÅŸ baÅŸvurusu', 'cv oluÅŸtur', 'Ã¼cretsiz cv',
        'Ã¶zgeÃ§miÅŸ hazÄ±rlama', 'iÅŸ arama sitesi', 'eleman.net', 'kariyer.net', 'secretcv',
        'yenibiris', 'sahibinden iÅŸ ilanlarÄ±', 'iÅŸkur iÅŸ ilanlarÄ±', 'online iÅŸ baÅŸvurusu'
      ],
      url: window.location.pathname
    });

    // Add structured data for homepage job listings
    const jobListSchema = {
      "@context": "https://schema.org",
      "@type": "ItemList",
      "name": "GÃ¼ncel Ä°ÅŸ Ä°lanlarÄ± 2025",
      "description": "TÃ¼rkiye'nin en gÃ¼ncel iÅŸ ilanlarÄ± listesi",
      "url": "https://isilanlarim.org",
      "numberOfItems": filteredJobs.length,
      "itemListElement": filteredJobs.slice(0, 10).map((job, index) => ({
        "@type": "ListItem",
        "position": index + 1,
        "item": {
          "@type": "JobPosting",
          "title": job.title,
          "description": job.description.substring(0, 100) + "...",
          "hiringOrganization": {
            "@type": "Organization",
            "name": job.company
          },
          "jobLocation": job.location,
          "url": `https://isilanlarim.org${generateJobUrl(job)}`
        }
      }))
    };

    // Toast notifications
    if (location.state?.newJobCreated) {
      toast.success('ðŸŽ‰ Ä°lanÄ±nÄ±z baÅŸarÄ±yla yayÄ±nlandÄ± ve en Ã¼stte gÃ¶rÃ¼nÃ¼yor!', {
        duration: 4000,
        position: 'top-center',
        style: {
          background: '#10B981',
          color: '#FFFFFF',
          padding: '16px',
          borderRadius: '12px',
          fontSize: '16px',
          fontWeight: '500',
          boxShadow: '0 10px 25px rgba(16, 185, 129, 0.3)'
        },
        icon: 'ðŸš€'
      });
      window.history.replaceState({}, document.title);
    }

    // Scroll position restore
    const scrollPosition = sessionStorage.getItem('scrollPosition');
    const previousPath = sessionStorage.getItem('previousPath');
    
    if (scrollPosition && previousPath && previousPath.includes(window.location.pathname)) {
      setTimeout(() => {
        window.scrollTo(0, parseInt(scrollPosition));
        sessionStorage.removeItem('scrollPosition');
        sessionStorage.removeItem('previousPath');
      }, 100);
    } else if (location.state?.scrollToTop) {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    if (jobs.length > 0) {
      checkJobDates(jobs);
    }
  }, [pageNumber, location.state, jobs]);

  const getCategoryName = (categoryId: string) => {
    const category = jobCategories.find(c => c.id === categoryId);
    return category ? `${category.name} Ä°lanlarÄ±` : 'TÃ¼m Ä°lanlar';
  };

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await refetchJobs();
    setIsRefreshing(false);
    toast.success('ðŸ“Š Ä°lanlar gÃ¼ncellendi!', {
      duration: 2000,
      position: 'bottom-center'
    });
  };

  const toggleMobileFilters = () => {
    setShowMobileFilters(!showMobileFilters);
    // Prevent body scroll when filters are open
    document.body.style.overflow = !showMobileFilters ? 'hidden' : 'auto';
  };

  // Close mobile filters when clicking outside
  useEffect(() => {
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, []);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Full Search Hero - Only on top */}
      <div className="bg-white">
        <SearchHero
          onSearch={setSearchTerm}
          onLocationChange={(city) => updateFilters({ city })}
          onCategorySelect={(category) => updateFilters({ category, subCategory: '' })}
          availableCategories={categories}
          updateFilters={updateFilters}
          updateFilters={updateFilters}
        />
      </div>

      {/* Compact Sticky Search Bar */}
      <div className="sticky top-0 z-50 bg-white/95 backdrop-blur-sm border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 py-3">
          <div className="flex items-center gap-3">
            {/* Compact Search Input */}
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Ä°ÅŸ ara... (Ã–rn: YazÄ±lÄ±m GeliÅŸtirici, SatÄ±ÅŸ Temsilci)"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            {/* Mobile Filter Button */}
            <button
              onClick={toggleMobileFilters}
              className="lg:hidden flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
            >
              <Filter className="w-4 h-4" />
              <span>Filtre</span>
              {hasActiveFilters && (
                <span className="bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold">
                  !
                </span>
              )}
            </button>

            {/* Results Count */}
            <div className="hidden sm:flex items-center text-sm text-gray-600 bg-gray-100 px-3 py-2 rounded-lg">
              <Briefcase className="w-4 h-4 mr-1" />
              {filteredJobs.length} ilan
              {isShowingSimilar && (
                <span className="ml-1 text-yellow-600">*</span>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Mobile Header - Only Stats */}
        <div className="lg:hidden mb-6">
          <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-lg font-bold text-gray-900">
                  {filters.category ? getCategoryName(filters.category) : 'TÃ¼m Ä°lanlar'}
                </h1>
                <p className="text-sm text-gray-500 mt-1">
                  {filteredJobs.length} aktif ilan gÃ¶steriliyor
                  {isShowingSimilar && filters.city && (
                    <span className="text-yellow-600 ml-1">
                      ({filters.city} benzeri)
                    </span>
                  )}
                </p>
              </div>
              <button
                onClick={handleRefresh}
                disabled={isRefreshing}
                className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors duration-200"
                title="Ä°lanlarÄ± Yenile"
              >
                <RefreshCw className={`w-5 h-5 ${isRefreshing ? 'animate-spin' : ''}`} />
              </button>
            </div>
          </div>
        </div>

        {/* Desktop Layout */}
        <div className="hidden lg:grid lg:grid-cols-12 gap-8">
          {/* Desktop Sidebar */}
          <div className="lg:col-span-3">
            <div className="sticky top-20 space-y-6">
              {/* Stats Card */}
              <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-gray-900">Ä°statistikler</h3>
                  <button
                    onClick={handleRefresh}
                    disabled={isRefreshing}
                    className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
                    title="Yenile"
                  >
                    <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />
                  </button>
                </div>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Toplam Ä°lan</span>
                    <span className="font-semibold text-blue-600">{jobs.length}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">FiltrelenmiÅŸ</span>
                    <span className="font-semibold text-green-600">{filteredJobs.length}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Kategori</span>
                    <span className="font-semibold text-purple-600">{categories.length}</span>
                  </div>
                  {isShowingSimilar && filters.city && (
                    <div className="pt-2 border-t border-gray-200">
                      <div className="text-xs text-yellow-600 flex items-center gap-1">
                        <AlertCircle className="h-3 w-3" />
                        {filters.city} benzeri gÃ¶steriliyor
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Filters */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200">
                <JobFilters
                  filters={filters}
                  onFilterChange={updateFilters}
                  onClearFilters={clearFilters}
                  hasActiveFilters={hasActiveFilters}
                  availableCategories={categories}
                />
              </div>
            </div>
          </div>

          {/* Desktop Main Content */}
          <div className="lg:col-span-9">
            <MainContent 
              loading={loading}
              error={error}
              filteredJobs={filteredJobs}
              filters={filters}
              getCategoryName={getCategoryName}
              refetchJobs={refetchJobs}
              hasMore={hasMore}
              loadMoreJobs={loadMoreJobs}
              loadingMore={loadingMore}
              isShowingSimilar={isShowingSimilar}
              onClearFilters={clearFilters}
            />
          </div>
        </div>

        {/* Mobile Layout */}
        <div className="lg:hidden">
          <MainContent 
            loading={loading}
            error={error}
            filteredJobs={filteredJobs}
            filters={filters}
            getCategoryName={getCategoryName}
            refetchJobs={refetchJobs}
            hasMore={hasMore}
            loadMoreJobs={loadMoreJobs}
            loadingMore={loadingMore}
            isShowingSimilar={isShowingSimilar}
            onClearFilters={clearFilters}
          />
        </div>
      </div>

      {/* Mobile Filter Drawer */}
      {showMobileFilters && (
        <div className="fixed inset-0 z-50 lg:hidden">
          {/* Backdrop */}
          <div 
            className="absolute inset-0 bg-black/50 backdrop-blur-sm"
            onClick={toggleMobileFilters}
          />
          
          {/* Drawer */}
          <div className="absolute inset-y-0 right-0 w-full max-w-sm bg-white shadow-xl">
            <div className="flex items-center justify-between p-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Filtreler</h3>
              <button
                onClick={toggleMobileFilters}
                className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <div className="p-4 overflow-y-auto h-full pb-20">
              <JobFilters
                filters={filters}
                onFilterChange={(newFilters) => {
                  updateFilters(newFilters);
                  setShowMobileFilters(false);
                }}
                onClearFilters={() => {
                  clearFilters();
                  setShowMobileFilters(false);
                }}
                hasActiveFilters={hasActiveFilters}
                availableCategories={categories}
              />
            </div>
          </div>
        </div>
      )}

      {/* SEO Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <SEOJobContent />
      </div>
    </div>
  );
}

// Main Content Component
const MainContent: React.FC<{
  loading: boolean;
  error: string | null;
  filteredJobs: any[];
  filters: any;
  getCategoryName: (categoryId: string) => string;
  refetchJobs: () => void;
  hasMore: boolean;
  loadMoreJobs: () => void;
  loadingMore: boolean;
  isShowingSimilar?: boolean;
  onClearFilters?: () => void;
}> = ({
  loading,
  error,
  filteredJobs,
  filters,
  getCategoryName,
  refetchJobs,
  hasMore,
  loadMoreJobs,
  loadingMore,
  isShowingSimilar,
  onClearFilters
}) => {
  // Loading State
  if (loading && filteredJobs.length === 0) {
    return (
      <div className="bg-white rounded-xl p-8 shadow-sm border border-gray-200">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-2 border-blue-600 border-t-transparent mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Ä°lanlar YÃ¼kleniyor</h3>
          <p className="text-gray-600">En gÃ¼ncel iÅŸ fÄ±rsatlarÄ± getiriliyor...</p>
        </div>
      </div>
    );
  }

  // Error State
  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-xl p-8 text-center">
        <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <X className="w-6 h-6 text-red-600" />
        </div>
        <h3 className="text-lg font-semibold text-red-900 mb-2">Bir Hata OluÅŸtu</h3>
        <p className="text-red-700 mb-4">{error}</p>
        <button
          onClick={() => window.location.reload()}
          className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
        >
          SayfayÄ± Yenile
        </button>
      </div>
    );
  }

  // Empty State
  if (filteredJobs.length === 0) {
    return (
      <div className="bg-white rounded-xl p-12 shadow-sm border border-gray-200 text-center">
        <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <Search className="w-8 h-8 text-gray-400" />
        </div>
        <h3 className="text-xl font-semibold text-gray-900 mb-2">Ä°lan BulunamadÄ±</h3>
        <p className="text-gray-600 mb-6">Arama kriterlerinizi deÄŸiÅŸtirmeyi deneyin.</p>
        <div className="space-y-3">
          {onClearFilters && (
            <button
              onClick={onClearFilters}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Filtreleri Temizle
            </button>
          )}
          <button
            onClick={() => window.location.reload()}
            className="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
          >
            SayfayÄ± Yenile
          </button>
        </div>
      </div>
    );
  }

  // Job List
  return (
    <div className="space-y-6">
      {/* Desktop Header */}
      <div className="hidden lg:block">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">
              {filters.category ? getCategoryName(filters.category) : 'TÃ¼m Ä°lanlar'}
            </h2>
            <p className="text-gray-600 mt-1">{filteredJobs.length} ilan listeleniyor</p>
          </div>
        </div>
      </div>

      {/* Job List */}
      <JobList 
        jobs={filteredJobs} 
        onJobDeleted={refetchJobs}
        hasMore={hasMore}
        loadMoreJobs={loadMoreJobs}
        loadingMore={loadingMore}
        isShowingSimilar={isShowingSimilar}
        selectedCity={filters.city}
        onClearFilters={onClearFilters}
      />
    </div>
  );
};