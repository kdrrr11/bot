import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Firebase Admin SDK zaten index.ts'de initialize edilmi≈ü
const API_KEY = 'AIzaSyBeaq3AVf5FDGORNwF_ls2osRqEja2N_UU';
const genAI = new GoogleGenerativeAI(API_KEY);

// Her g√ºn saat 09:00'da √ßalƒ±≈üacak
exports.scheduledBlogPost = functions.pubsub
  .schedule('0 9 * * *')
  .timeZone('Europe/Istanbul')
  .onRun(async (context) => {
    const db = admin.database();
    
    try {
      console.log('üìù G√ºnl√ºk blog yazƒ±sƒ± olu≈üturuluyor...');

      // Son blog yazƒ±larƒ±nƒ± kontrol et
      const recentPostsRef = db.ref('blog_posts').orderByChild('createdAt').limitToLast(7);
      const recentSnapshot = await recentPostsRef.once('value');
      
      let recentTitles = '';
      if (recentSnapshot.exists()) {
        const posts = Object.values(recentSnapshot.val());
        recentTitles = posts.map((post: any) => post.title).join(', ');
      }

      // G√ºncel i≈ü ilanƒ± istatistiklerini al
      const jobsRef = db.ref('jobs').orderByChild('status').equalTo('active').limitToLast(100);
      const jobsSnapshot = await jobsRef.once('value');
      
      let jobStats = {
        totalJobs: 0,
        topCategories: [] as string[],
        topCities: [] as string[],
        newJobsToday: 0
      };

      if (jobsSnapshot.exists()) {
        const jobs = Object.values(jobsSnapshot.val());
        jobStats.totalJobs = jobs.length;
        
        const categoryCount: Record<string, number> = {};
        const cityCount: Record<string, number> = {};
        const today = new Date().toDateString();
        
        jobs.forEach((job: any) => {
          categoryCount[job.category] = (categoryCount[job.category] || 0) + 1;
          cityCount[job.location] = (cityCount[job.location] || 0) + 1;
          
          if (new Date(job.createdAt).toDateString() === today) {
            jobStats.newJobsToday++;
          }
        });

        jobStats.topCategories = Object.entries(categoryCount)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 5)
          .map(([category]) => category);

        jobStats.topCities = Object.entries(cityCount)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 5)
          .map(([city]) => city);
      }

      // AI ile blog yazƒ±sƒ± olu≈ütur
      const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });
      
      const prompt = `
Sen ƒ∞≈üBuldum platformunun AI edit√∂r√ºs√ºn. G√ºnl√ºk blog yazƒ±sƒ± olu≈ütur.

G√úNCEL VERƒ∞LER:
- Toplam aktif ilan: ${jobStats.totalJobs}
- Bug√ºn eklenen yeni ilan: ${jobStats.newJobsToday}
- En pop√ºler kategoriler: ${jobStats.topCategories.join(', ')}
- En aktif ≈üehirler: ${jobStats.topCities.join(', ')}

SON 7 G√úN√úN YAZILARI (Tekrar etme):
${recentTitles}

YAZMA KURALLARI:
1. Tamamen √∂zg√ºn i√ßerik (kopya deƒüil)
2. SEO uyumlu ba≈ülƒ±k (50-60 karakter)
3. 800-1200 kelime arasƒ±
4. G√ºncel i≈ü piyasasƒ± trendleri
5. Pratik kariyer tavsiyeleri
6. T√ºrk√ße, samimi ve bilgilendirici ton
7. HTML formatƒ±nda i√ßerik
8. Okuma s√ºresi 4-6 dakika

KONU √ñNERƒ∞LERƒ∞:
- "2025 ƒ∞≈ü Piyasasƒ± Trendleri ve Fƒ±rsatlar"
- "CV Hazƒ±rlama: Modern ƒ∞pu√ßlarƒ±"
- "M√ºlakat Ba≈üarƒ± Stratejileri"
- "Uzaktan √áalƒ±≈üma Rehberi"
- "Kariyer Deƒüi≈üimi: Adƒ±m Adƒ±m Rehber"
- "ƒ∞≈ü Arama Stratejileri 2025"
- "Sekt√∂r Analizi: Hangi Alanlarda Fƒ±rsat Var?"

JSON formatƒ±nda yanƒ±t ver:
{
  "title": "SEO uyumlu ba≈ülƒ±k",
  "content": "Tam blog yazƒ±sƒ± i√ßeriƒüi (HTML formatƒ±nda)",
  "excerpt": "150 karakter √∂zet",
  "category": "kariyer-rehberi",
  "tags": ["tag1", "tag2", "tag3"],
  "readTime": 5
}
`;

      const result = await model.generateContent(prompt);
      const response = result.response.text();
      
      // JSON temizle
      let cleaned = response
        .replace(/```json\s*/g, '')
        .replace(/```\s*/g, '')
        .trim();
      
      const blogData = JSON.parse(cleaned);

      // Slug olu≈ütur
      const generateSlug = (text: string): string => {
        return text
          .toLowerCase()
          .replace(/ƒü/g, 'g')
          .replace(/√º/g, 'u')
          .replace(/≈ü/g, 's')
          .replace(/ƒ±/g, 'i')
          .replace(/√∂/g, 'o')
          .replace(/√ß/g, 'c')
          .replace(/[^a-z0-9\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim();
      };

      // Blog yazƒ±sƒ±nƒ± kaydet
      const blogPost = {
        title: blogData.title,
        content: blogData.content,
        excerpt: blogData.excerpt,
        slug: generateSlug(blogData.title),
        category: blogData.category,
        tags: blogData.tags,
        author: 'AI Assistant',
        createdAt: admin.database.ServerValue.TIMESTAMP,
        updatedAt: admin.database.ServerValue.TIMESTAMP,
        isAIGenerated: true,
        readTime: blogData.readTime,
        views: 0,
        likes: 0,
        comments: []
      };

      const blogRef = db.ref('blog_posts');
      await blogRef.push(blogPost);

      console.log('‚úÖ G√ºnl√ºk blog yazƒ±sƒ± olu≈üturuldu:', blogData.title);
      
      return null;

    } catch (error) {
      console.error('‚ùå G√ºnl√ºk blog yazƒ±sƒ± hatasƒ±:', error);
      return null;
    }
  });